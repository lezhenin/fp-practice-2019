module Task4_2 where

{-
  Задание 4.1
  Реализация монады над множеством из четырёх элементов.
  Реализуйте все требуемые классы типов и объясните, почему они реализованы именно так.
-}

data FourOf a = FourOf a a a a deriving(Show,Eq)

-- реализуйте классы `Functor`, `Applicative` и `Monad` для типа `FourOf`
-- таким образом, что
-- do { x <- FourOf 1 2 3 4; y <- FourOf 4 6 7 8; return $ x + y } === FourOf 5 8 10 12

-- Класс Functor описывает параметризованные типы,
-- данные внутри которых могут быть преобразованы.
instance Functor FourOf where
    -- Для преобразования данных, все четыре значения
    -- достаются из контекста, к ним применяется функция f,
    -- затем значения помещаются обратно в контекст.
    fmap f (FourOf a b c d) = FourOf (f a) (f b) (f c) (f d)

-- Класс Applicative описывает параметризованные типы,
-- для которых определены операции для
--     помещения значения в контекст типа,
--     организации последовательности вычислений.
instance Applicative FourOf where
    -- При помещения значения x в контекст, данное значение
    -- помещается на место всех четырех элементов множества.
    pure x = FourOf x x x x
    -- Для применения функций в контексте (af bf cf df) к
    -- значениям в контексте (a b c d) выполняется их извлечение
    -- из контекста. Затем функции применяются к значениям поэлементно.
    (FourOf af bf cf df) <*> (FourOf a b c d) = FourOf (af a) (bf b) (cf c) (df d)

-- Класс Monad описывает параметризованные типы,
-- для которых определены операции для организации
-- последовательности действий, которая может быть описана
-- с помощью do синтаксиса.
instance Monad FourOf where
    -- Для применения к значениям в контексте (a b c d)
    -- функции f, которая возвращает значение в контексте,
    -- выполняется извлечение значений из контекста. Затем
    -- функция f применяется к каждому значению. Затем значения
    -- (oa ob oc od) извлекаются из полученных четырех монад и
    -- помещаются в контекст возвращаемой монады. Позиции
    -- соотвествующих элемнтов во входном множестве, в выходном
    -- множестве и во множестве, полученном в результате применения
    -- функции f, совпадают. Это позволяет реализовать
    -- поведение, описанное в задании.
    (FourOf a b c d) >>= f = FourOf oa ob oc od
        where (FourOf oa _ _ _) = f a
              (FourOf _ ob _ _) = f b
              (FourOf _ _ oc _) = f c
              (FourOf _ _ _ od) = f d
